#!/usr/bin/env node
/**
 * Combo of the Day API Server
 * Serves combo data via REST API endpoints
 *
 * Usage:
 *   node combo-api-server.cjs
 *
 * Endpoints:
 *   GET /api/combo-of-the-day           - Today's combo
 *   GET /api/combo-of-the-day/:date     - Specific date (YYYY-MM-DD)
 *   GET /api/combo-of-the-day/latest    - Last 7 days
 *   GET /api/combo-of-the-day/archive   - All combos (last 90 days)
 *   GET /api/combo-of-the-day/rss       - RSS feed
 */

const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

const PORT = 3002;
const BLOG_DATA_FILE = path.join(__dirname, 'combo-of-the-day.json');

// CORS headers
const CORS_HEADERS = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type',
};

// Load combo data
function loadComboData() {
  if (!fs.existsSync(BLOG_DATA_FILE)) {
    return [];
  }
  try {
    return JSON.parse(fs.readFileSync(BLOG_DATA_FILE, 'utf8'));
  } catch (error) {
    console.error('Error loading combo data:', error);
    return [];
  }
}

// Get combo for specific date
function getComboByDate(date) {
  const combos = loadComboData();
  return combos.find(c => c.date === date);
}

// Get today's combo
function getTodayCombo() {
  const today = new Date().toISOString().split('T')[0];
  return getComboByDate(today);
}

// Get latest N combos
function getLatestCombos(count = 7) {
  const combos = loadComboData();
  return combos.slice(0, count);
}

// Generate RSS feed
function generateRSS() {
  const combos = loadComboData().slice(0, 30); // Last 30 days
  const baseUrl = 'https://emojifusion.ayotype.com';

  const items = combos.map(combo => `
    <item>
      <title>Combo of the Day: ${combo.name}</title>
      <link>${baseUrl}/blog/combo-of-the-day/${combo.date}</link>
      <guid isPermaLink="true">${baseUrl}/blog/combo-of-the-day/${combo.date}</guid>
      <pubDate>${new Date(combo.date).toUTCString()}</pubDate>
      <description><![CDATA[
        ${combo.combo}<br><br>
        <strong>Theme:</strong> ${combo.theme}<br>
        <strong>Tone:</strong> ${combo.tone}<br>
        <strong>Vibe:</strong> ${combo.description}
      ]]></description>
      ${combo.png_url ? `<enclosure url="${baseUrl}${combo.png_url}" type="image/png" />` : ''}
      <category>${combo.tone}</category>
      <category>${combo.theme}</category>
    </item>
  `).join('\n');

  return `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EmojiFusion - Combo of the Day</title>
    <link>${baseUrl}/blog/combo-of-the-day</link>
    <description>Daily emoji and ASCII art combinations generated by EmojiFusion</description>
    <language>en-us</language>
    <lastBuildDate>${new Date().toUTCString()}</lastBuildDate>
    <atom:link href="${baseUrl}/api/combo-of-the-day/rss" rel="self" type="application/rss+xml" />
    <image>
      <url>${baseUrl}/emojifusion-icon.png</url>
      <title>EmojiFusion</title>
      <link>${baseUrl}</link>
    </image>
    ${items}
  </channel>
</rss>`;
}

// Handle API request
function handleRequest(req, res) {
  const parsedUrl = url.parse(req.url, true);
  const pathname = parsedUrl.pathname;

  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    res.writeHead(200, { ...CORS_HEADERS });
    res.end();
    return;
  }

  // Handle GET requests
  if (req.method === 'GET') {

    // Today's combo
    if (pathname === '/api/combo-of-the-day' || pathname === '/api/combo-of-the-day/') {
      const combo = getTodayCombo();
      if (combo) {
        res.writeHead(200, {
          'Content-Type': 'application/json',
          ...CORS_HEADERS
        });
        res.end(JSON.stringify(combo, null, 2));
      } else {
        res.writeHead(404, {
          'Content-Type': 'application/json',
          ...CORS_HEADERS
        });
        res.end(JSON.stringify({
          error: 'No combo for today',
          message: 'Run: node generate-combo-of-the-day.cjs'
        }));
      }
      return;
    }

    // Latest combos
    if (pathname === '/api/combo-of-the-day/latest') {
      const count = parseInt(parsedUrl.query.count) || 7;
      const combos = getLatestCombos(count);
      res.writeHead(200, {
        'Content-Type': 'application/json',
        ...CORS_HEADERS
      });
      res.end(JSON.stringify(combos, null, 2));
      return;
    }

    // Archive (all combos)
    if (pathname === '/api/combo-of-the-day/archive') {
      const combos = loadComboData();
      res.writeHead(200, {
        'Content-Type': 'application/json',
        ...CORS_HEADERS
      });
      res.end(JSON.stringify(combos, null, 2));
      return;
    }

    // RSS feed
    if (pathname === '/api/combo-of-the-day/rss') {
      const rss = generateRSS();
      res.writeHead(200, {
        'Content-Type': 'application/rss+xml',
        ...CORS_HEADERS
      });
      res.end(rss);
      return;
    }

    // Specific date
    const dateMatch = pathname.match(/^\/api\/combo-of-the-day\/(\d{4}-\d{2}-\d{2})$/);
    if (dateMatch) {
      const date = dateMatch[1];
      const combo = getComboByDate(date);
      if (combo) {
        res.writeHead(200, {
          'Content-Type': 'application/json',
          ...CORS_HEADERS
        });
        res.end(JSON.stringify(combo, null, 2));
      } else {
        res.writeHead(404, {
          'Content-Type': 'application/json',
          ...CORS_HEADERS
        });
        res.end(JSON.stringify({
          error: 'Combo not found',
          date: date
        }));
      }
      return;
    }

    // Health check
    if (pathname === '/health' || pathname === '/') {
      const combos = loadComboData();
      res.writeHead(200, {
        'Content-Type': 'application/json',
        ...CORS_HEADERS
      });
      res.end(JSON.stringify({
        status: 'ok',
        service: 'Combo of the Day API',
        version: '1.0.0',
        combos_available: combos.length,
        endpoints: [
          'GET /api/combo-of-the-day - Today\'s combo',
          'GET /api/combo-of-the-day/:date - Specific date',
          'GET /api/combo-of-the-day/latest - Last 7 days',
          'GET /api/combo-of-the-day/archive - All combos',
          'GET /api/combo-of-the-day/rss - RSS feed'
        ]
      }, null, 2));
      return;
    }
  }

  // 404 for unknown endpoints
  res.writeHead(404, {
    'Content-Type': 'application/json',
    ...CORS_HEADERS
  });
  res.end(JSON.stringify({ error: 'Not found' }));
}

// Start server
const server = http.createServer(handleRequest);

server.listen(PORT, '127.0.0.1', () => {
  console.log('üöÄ Combo of the Day API Server');
  console.log(`üîó http://127.0.0.1:${PORT}\n`);
  console.log('üì° Available endpoints:');
  console.log(`   ‚Ä¢ GET /api/combo-of-the-day           - Today's combo`);
  console.log(`   ‚Ä¢ GET /api/combo-of-the-day/:date     - Specific date`);
  console.log(`   ‚Ä¢ GET /api/combo-of-the-day/latest    - Last 7 days`);
  console.log(`   ‚Ä¢ GET /api/combo-of-the-day/archive   - All combos`);
  console.log(`   ‚Ä¢ GET /api/combo-of-the-day/rss       - RSS feed`);
  console.log('\nüí° Test it: curl http://127.0.0.1:3002/api/combo-of-the-day\n');

  const combos = loadComboData();
  if (combos.length === 0) {
    console.log('‚ö†Ô∏è  No combo data found. Run: node generate-combo-of-the-day.cjs\n');
  } else {
    console.log(`‚úÖ Loaded ${combos.length} combos\n`);
  }
});
